// Generated by gencpp from file package/MyMessage.msg
// DO NOT EDIT!


#ifndef PACKAGE_MESSAGE_MYMESSAGE_H
#define PACKAGE_MESSAGE_MYMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace package
{
template <class ContainerAllocator>
struct MyMessage_
{
  typedef MyMessage_<ContainerAllocator> Type;

  MyMessage_()
    : name()
    , id(0)
    , values()  {
    }
  MyMessage_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , id(0)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::package::MyMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package::MyMessage_<ContainerAllocator> const> ConstPtr;

}; // struct MyMessage_

typedef ::package::MyMessage_<std::allocator<void> > MyMessage;

typedef boost::shared_ptr< ::package::MyMessage > MyMessagePtr;
typedef boost::shared_ptr< ::package::MyMessage const> MyMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package::MyMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package::MyMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::package::MyMessage_<ContainerAllocator1> & lhs, const ::package::MyMessage_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.values == rhs.values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::package::MyMessage_<ContainerAllocator1> & lhs, const ::package::MyMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::package::MyMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package::MyMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2c3af80379375679a75f5d26c24ce1b";
  }

  static const char* value(const ::package::MyMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2c3af8037937567ULL;
  static const uint64_t static_value2 = 0x9a75f5d26c24ce1bULL;
};

template<class ContainerAllocator>
struct DataType< ::package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package/MyMessage";
  }

  static const char* value(const ::package::MyMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#MyMessage.msg\n"
"\n"
"string name\n"
"int32 id\n"
"float32[] values\n"
;
  }

  static const char* value(const ::package::MyMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package::MyMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package::MyMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package::MyMessage_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE_MESSAGE_MYMESSAGE_H
