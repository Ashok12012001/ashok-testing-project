// Generated by gencpp from file asho/ActionNameGoal.msg
// DO NOT EDIT!


#ifndef ASHO_MESSAGE_ACTIONNAMEGOAL_H
#define ASHO_MESSAGE_ACTIONNAMEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace asho
{
template <class ContainerAllocator>
struct ActionNameGoal_
{
  typedef ActionNameGoal_<ContainerAllocator> Type;

  ActionNameGoal_()
    : target_position(0.0)  {
    }
  ActionNameGoal_(const ContainerAllocator& _alloc)
    : target_position(0.0)  {
  (void)_alloc;
    }



   typedef float _target_position_type;
  _target_position_type target_position;





  typedef boost::shared_ptr< ::asho::ActionNameGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asho::ActionNameGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ActionNameGoal_

typedef ::asho::ActionNameGoal_<std::allocator<void> > ActionNameGoal;

typedef boost::shared_ptr< ::asho::ActionNameGoal > ActionNameGoalPtr;
typedef boost::shared_ptr< ::asho::ActionNameGoal const> ActionNameGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asho::ActionNameGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asho::ActionNameGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::asho::ActionNameGoal_<ContainerAllocator1> & lhs, const ::asho::ActionNameGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_position == rhs.target_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::asho::ActionNameGoal_<ContainerAllocator1> & lhs, const ::asho::ActionNameGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace asho

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::asho::ActionNameGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asho::ActionNameGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asho::ActionNameGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asho::ActionNameGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asho::ActionNameGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asho::ActionNameGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asho::ActionNameGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5425516b20f0095429537e35618ec273";
  }

  static const char* value(const ::asho::ActionNameGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5425516b20f00954ULL;
  static const uint64_t static_value2 = 0x29537e35618ec273ULL;
};

template<class ContainerAllocator>
struct DataType< ::asho::ActionNameGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asho/ActionNameGoal";
  }

  static const char* value(const ::asho::ActionNameGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asho::ActionNameGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# ActionName.action\n"
"\n"
"# Goal\n"
"float32 target_position\n"
"\n"
;
  }

  static const char* value(const ::asho::ActionNameGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asho::ActionNameGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionNameGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asho::ActionNameGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asho::ActionNameGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_position: ";
    Printer<float>::stream(s, indent + "  ", v.target_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASHO_MESSAGE_ACTIONNAMEGOAL_H
